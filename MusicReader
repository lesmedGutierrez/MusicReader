from pydub import AudioSegment
import os


cwd = os.getcwd()
print(cwd)

# import os
# import glob
# from pydub import AudioSegment
#
# video_dir = '/home/lesmed/PycharmProjects/MusicReader/'  # Path where the videos are located
# extension_list = ('*.mp3', '*.flv')
#
# os.chdir(video_dir)
# for extension in extension_list:
#     for video in glob.glob(extension):
#         mp3_filename = os.path.splitext(os.path.basename(video))[0] + '.mp3'
#         #AudioSegment.from_file(video).export(mp3_filename, format='mp3')
#         song = AudioSegment.from_mp3(video)
#         print(extension)
#         print(video)



song = AudioSegment.from_mp3("/home/lesmed/PycharmProjects/MusicReader/residente_guerra.mp3")
song_5 = AudioSegment.from_mp3("/home/lesmed/PycharmProjects/MusicReader/residente_guerra_5mb.mp3")

raw_data_song = str(song.raw_data)
raw_data_song_5 = str(song_5.raw_data)

print(len(raw_data_song))
print(len(raw_data_song_5))
print(song)


# pydub does things in milliseconds
ten_seconds = 10 * 1000

first_10_seconds = song[:ten_seconds]

last_5_seconds = song[-5000:]
#Make the beginning louder and the end quieter

# boost volume by 6dB
beginning = first_10_seconds + 6

# reduce volume by 3dB
end = last_5_seconds - 3
#Concatenate audio (add one file to the end of another)

without_the_middle = beginning + end
#How long is it?

without_the_middle.duration_seconds == 15.0
#AudioSegments are immutable

# song is not modified
backwards = song.reverse()
#Crossfade (again, beginning and end are not modified)

# 1.5 second crossfade
with_style = beginning.append(end, crossfade=1500)
#Repeat

# repeat the clip twice
do_it_over = with_style * 2
#Fade (note that you can chain operations because everything returns an AudioSegment)

# 2 sec fade in, 3 sec fade out
awesome = do_it_over.fade_in(2000).fade_out(3000)
#Save the results (again whatever ffmpeg supports)

#awesome.export("mashup.mp3", format="mp3")
#Save the results with tags (metadata)

#awesome.export("mashup.mp3", format="mp3", tags={'artist': 'Various artists', 'album': 'Best of 2011', 'comments': 'This album is awesome!'})
#You can pass an optional bitrate argument to export using any syntax ffmpeg supports.


#song.export("mashup2.mp3", format="mp3", bitrate="192k", tags={'title':'Guerra', 'artist': 'Residente', 'album': 'Residente', 'comments': 'This album is awesome!', 'year':'2017'})
middle_song = song[59000:]


#middle_song.export("mashup3.mp3", format="mp3", bitrate="192k", tags={'title':'Guerra', 'artist': 'Residente', 'album': 'Residente', 'comments': 'This album is awesome!', 'year':'2017'})
print(len(middle_song.raw_data))
#Any further arguments supported by ffmpeg can be passed as a list in a 'parameters' argument, with switch first, argument second. Note that no validation takes place on these parameters, and you may be limited by what your particular build of ffmpeg/avlib supports.

# Use preset mp3 quality 0 (equivalent to lame V0)
#awesome.export("mashup.mp3", format="mp3", parameters=["-q:a", "0"])

# Mix down to two channels and set hard output volume
#awesome.export("mashup.mp3", format="mp3", parameters=["-ac", "2", "-vol", "150"])



